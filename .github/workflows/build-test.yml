name: Build and Test

on:
  push:
    branches:
      - master
    tags:
      - v*
      - exp*
  pull_request:
    branches:
      - master

jobs:
  linux-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0  
    
    - name: Set up environment variables
      run: |
        echo "SIGNALS_REPO=https://github.com/MotionSpell/signals.git" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get install -y --no-install-recommends \
        tzdata \
        zip \
        unzip \
        curl \
        tar \
        git \
        ca-certificates \
        linux-libc-dev \
        build-essential \
        pkg-config \
        yasm \
        nasm \
        autoconf \
        automake \
        autoconf-archive \
        autotools-dev \
        python3 \
        python3-jinja2 \
        gcc \
        g++ \
        make \
        libtool \
        libtool-bin \
        astyle \
        bc \
        libltdl-dev

    - name: Bootstrap vcpkg
      run: |
        ./vcpkg/bootstrap-vcpkg.sh

    - name: Install vcpkg dependencies
      run: |
        ./vcpkg/vcpkg install --triplet=x64-linux-dynamic

    - name: Upload vcpkg buildtrees in case of failure
      if: ${{ failure() }} 
      uses: actions/upload-artifact@v4
      with:
        name: linux-vcpkg-buildtrees
        path: ./vcpkg/buildtrees
        retention-days: 5
  
    - name: Fix for libcrypto build
      run: |
        sudo apt-get update && \
              sudo apt-get autoremove -y libtool && \
              sudo apt-get install -y libtool && \
              libtoolize --copy --force

    - name: Configure CMake
      run: |
        cmake --preset linux-production

    - name: Build the project
      run: |
        cmake --build build --preset linux-production --parallel $(nproc)

    - name: Install the project
      run: |
        cmake --install build --preset linux-production

    - name: Install pipeline test dependencies
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        python -m pip install requests 
        
        # Add library path to system
        echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/cwipc.conf
        sudo ldconfig
        
        # Install wheels directly to system Python
        echo "Installing CWIPC Python wheels:"
        find /usr/local/share/cwipc/python/ -name "*.whl" -exec sudo pip3 install {} \; || echo "No wheels found"
  
    - name: Run integration tests
      run: |
        source .venv/bin/activate
        # Show environment
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PYTHONPATH=$PYTHONPATH"
        echo "SIGNALS_SMD_PATH=$SIGNALS_SMD_PATH"
        echo "PATH=$PATH"
        
        # Run the pipeline test
        ./scripts/run-pipeline-test.sh
    
    - name: Upload all logs
      if: always()  # for debug purposes  
      uses: actions/upload-artifact@v4
      with:
        name: linux-test-logs
        path: ${{ env.BUILD_DIR }}/logs/**/*
        retention-days: 5

    - name: Create package
      run: cpack --preset linux-production

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lldash-linux-x86_64
        path: build/package/lldash-*.tar.gz

  macos-build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Set up environment variables
      run: |
        echo "BUILD_DIR=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        brew update && \
        brew install \
          cmake \
          ninja \
          pkg-config \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          python3 \
          astyle \
          zlib

    - name: Bootstrap vcpkg
      run: |
        ./vcpkg/bootstrap-vcpkg.sh

    - name: Install vcpkg dependencies
      run: |
        ./vcpkg/vcpkg install --triplet=arm64-osx-dynamic

    - name: Upload vcpkg buildtrees in case of failure
      if: ${{ failure() }} 
      uses: actions/upload-artifact@v4
      with:
        name: macos-vcpkg-buildtrees
        path: ./vcpkg/buildtrees
        retention-days: 5
    
    - name: Configure CMake
      run: |
        cmake --preset mac-production

    - name: Build the project
      run: |
        cmake --build build --preset mac-production --parallel $(sysctl -n hw.logicalcpu)

  
    - name: Run integration tests
      run: |
        
        # Show environment
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PYTHONPATH=$PYTHONPATH"
        
        # Run the pipeline test
        ./scripts/run-pipeline-test.sh

    - name: Upload all logs
      if: always()  # Upload logs even if the test fails for debug purposes
      uses: actions/upload-artifact@v4
      with:
        name: mac-test-logs
        path: ${{ env.BUILD_DIR }}/logs/**/*
        retention-days: 5

    - name: Create package
      run: cpack --preset mac-production

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lldash-mac-arm64
        path: build/package/lldash-*.tar.gz

  macos-intel-build:
    runs-on: macos-13

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Set up environment variables
      run: |
        echo "BUILD_DIR=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        brew update && \
        brew install \
          cmake \
          ninja \
          pkg-config \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          python3 \
          astyle \
          zlib

    - name: Bootstrap vcpkg
      run: |
        ./vcpkg/bootstrap-vcpkg.sh

    - name: Install vcpkg dependencies
      run: |
        ./vcpkg/vcpkg install --triplet=x64-osx-dynamic

    - name: Upload vcpkg buildtrees in case of failure
      if: ${{ failure() }} 
      uses: actions/upload-artifact@v4
      with:
        name: macos-intel-vcpkg-buildtrees
        path: ./vcpkg/buildtrees
        retention-days: 5
            
    - name: Configure CMake
      run: |
        cmake --preset intelmac-production

    - name: Build the project
      run: |
        cmake --build build --preset intelmac-production --parallel $(sysctl -n hw.logicalcpu)

    - name: Run integration tests
      run: |
        
        # Show environment
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PYTHONPATH=$PYTHONPATH"
        
        # Run the pipeline test
        ./scripts/run-pipeline-test.sh

    - name: Upload all logs
      if: always()  # Upload logs even if the test fails for debug purposes
      uses: actions/upload-artifact@v4
      with:
        name: mac-test-logs
        path: ${{ env.BUILD_DIR }}/logs/**/*
        retention-days: 5

    - name: Create package
      run: cpack --preset intelmac-production

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lldash-mac-x86_64
        path: build/package/lldash-*.tar.gz

  macos-universal-build:
    runs-on: macos-latest
    needs:
      - macos-build
      - macos-intel-build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - name: Get lipo-dir-merge
      run:
        git clone https://github.com/faaxm/lipo-dir-merge
    - name: Create download directory and upload directory
      run: |
        mkdir -p ${{ github.workspace }}/Assets
        mkdir -p ${{ github.workspace }}/tmp

    - name: Download MacOS Arm64 package
      uses: actions/download-artifact@v4
      with:
        name: lldash-mac-arm64
        path: ${{ github.workspace }}/tmp
    - name: Download MacOS Intel package
      uses: actions/download-artifact@v4
      with:
        name: lldash-mac-x86_64
        path: ${{ github.workspace }}/tmp
    - name: Create universal binary tree
      run: |
        set -x
        tar xfv ${{ github.workspace }}/tmp/*arm64*.tar.gz
        tar xfv ${{ github.workspace }}/tmp/*x86_64*.tar.gz
        dir_arm64=$(echo *arm64*)
        dir_x86_64=$(echo *x86_64*)
        dir_universal=${dir_arm64/arm64/universal}
        python3 lipo-dir-merge/lipo-dir-merge.py ${dir_arm64} ${dir_x86_64} ${dir_universal}
        echo "Universal directory: $dir_universal"
        tar cfz ${{ github.workspace }}/Assets/${dir_universal}.tar.gz ${dir_universal}

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lldash-mac-universal
        path: ${{ github.workspace }}/Assets/lldash-*.tar.gz
  
  windows-build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
        fetch-tags: true

    - name: Get all tags
      shell: bash
      run: |
        set -x
        pwd
        ls -la
        git show-ref --tags
        git log -10
        git describe

    - name: Install correct Python version
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'


    - name: Set up environment variables
      run: |
        echo "BUILD_DIR=$env:GITHUB_WORKSPACE" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: pwsh

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          make
          curl
        msystem: MINGW64

    - name: Set MSYS2 path
      run: |
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "MSYSTEM=MINGW64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "VCPKG_DEFAULT_TRIPLET=x64-mingw-dynamic" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: pwsh

    - name: Update MSYS2 and install dependencies
      run: |
        C:\msys64\usr\bin\bash.exe -c "pacman -Syu --noconfirm"
        C:\msys64\usr\bin\bash.exe -c "pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-pkg-config mingw-w64-x86_64-nasm mingw-w64-x86_64-yasm mingw-w64-x86_64-autotools mingw-w64-x86_64-gcc git make curl mingw-w64-x86_64-libtool mingw-w64-x86_64-python3 mingw-w64-x86_64-python-pip mingw-w64-x86_64-ca-certificates mingw-w64-x86_64-freetype"
        echo PATH environment variable:
        echo %PATH%
        echo GITHUB_PATH file contents:
        type %GITHUB_PATH%
      shell: cmd

    - name: HACK delete fake bash.exe from System32
      run: |
        del C:\Windows\System32\bash.exe
      shell: cmd
    # Bootstrap vcpkg for LLDASH
    - name: Bootstrap vcpkg for LLDASH
      shell: cmd
      run: |
        cd vcpkg
        bootstrap-vcpkg.bat

    - name: Install vcpkg dependencies for LLDASH
      run: |
        ./vcpkg/vcpkg install --triplet=x64-mingw-dynamic

    - name: Upload vcpkg buildtrees in case of failure
      if: ${{ failure() }} 
      uses: actions/upload-artifact@v4
      with:
        name: windows-vcpkg-buildtrees
        path: ./vcpkg/buildtrees
        retention-days: 5
    
    # Configure LLDASH project (MSYS2)
    - name: Configure LLDASH project
      run: |
        cmake --preset mingw-production
      shell: bash

    # Build LLDASH project
    - name: Build LLDASH project
      run: cmake --build build --preset mingw-production --parallel $(nproc)
      shell: bash

    # xxxjack I wonder why this is needed: exactly this same logic should be included in the CMake install process...
    # xxxjack unless I am mistaken and forgot to copy it over from cwipc....
    # xxxjack anyway, this should be done in cmake.
    - name: Analyze library dependencies and fix paths
      shell: pwsh
      run: |
        Write-Host "===== ANALYZING LIBRARY DEPENDENCIES =====" -ForegroundColor Cyan
        
        # Function to analyze DLL dependencies
        function Get-DllDependencies {
            param(
                [Parameter(Mandatory=$true)]
                [string]$FilePath
            )
            
            if (-not (Test-Path $FilePath)) {
                Write-Host "File not found: $FilePath" -ForegroundColor Red
                return
            }
            
            Write-Host "Analyzing dependencies for: $FilePath" -ForegroundColor Yellow
            
            # Use objdump from MSYS2/MinGW to list dependencies
            $output = & "C:\msys64\mingw64\bin\objdump.exe" -p $FilePath | Select-String "DLL Name"
            
            $missingDeps = @()
            Write-Host "Dependencies:" -ForegroundColor Green
            $output | ForEach-Object {
                $dllName = $_.ToString().Trim() -replace "DLL Name: ", ""
                Write-Host "  - $dllName"
                
                # Skip Windows system DLLs
                if ($dllName -match "^(ntdll|KERNEL32|KERNELBASE|msvcrt|bcrypt|ADVAPI32|RPCRT4|CRYPT32|ucrtbase|WS2_32|USER32|GDI32|ole32|SHELL32|SHLWAPI)\.dll$") {
                    Write-Host "    🔵 System DLL" -ForegroundColor Blue
                    return
                }
                
                # Try to locate each dependency
                $found = $false
                $searchPaths = @(
                    "${{ github.workspace }}\build\bin",
                    "${{ github.workspace }}\build\vcpkg_installed\x64-mingw-dynamic\bin",
                    "${{ github.workspace }}\build\vcpkg_installed\x64-mingw-dynamic\lib",
                    "C:\msys64\mingw64\bin"
                )
                
                $foundPath = ""
                foreach ($path in $searchPaths) {
                    $fullPath = Join-Path $path $dllName
                    if (Test-Path $fullPath) {
                        $foundPath = $fullPath
                        $found = $true
                        Write-Host "    ✅ Found at: $fullPath" -ForegroundColor Green
                        break
                    }
                }
                
                if (-not $found) {
                    Write-Host "    ❌ NOT FOUND in search paths" -ForegroundColor Red
                    $missingDeps += $dllName
                } else {
                    # Copy dependency to build/bin to ensure it's available
                    $targetPath = Join-Path "${{ github.workspace }}\build\bin" $dllName
                    if ((-not (Test-Path $targetPath)) -and $foundPath -ne $targetPath) {
                        Copy-Item $foundPath $targetPath
                        Write-Host "    📋 Copied to build/bin directory" -ForegroundColor Cyan
                    }
                }
            }
            
            return $missingDeps
        }
        
        # Collect all missing dependencies
        $missingDependencies = @()
        
        # Check key libraries
        $libraries = @(
            "${{ github.workspace }}\build\bin\bin2dash.so",
            "${{ github.workspace }}\build\bin\signals-unity-bridge.so"
        )
        
        foreach ($lib in $libraries) {
            $missingDeps = Get-DllDependencies -FilePath $lib
            $missingDependencies += $missingDeps
            Write-Host ""
        }
        
        # Analyze missing dependencies (if any)
        if ($missingDependencies.Count -gt 0) {
            Write-Host "⚠️ Missing dependencies:" -ForegroundColor Yellow
            $missingDependencies | Sort-Object -Unique | ForEach-Object {
                Write-Host "  - $_" -ForegroundColor Red
            }
            
            # Search for missing dependencies in the MSYS2 environment
            Write-Host "Searching MSYS2 for missing packages..." -ForegroundColor Cyan
            foreach ($dep in ($missingDependencies | Sort-Object -Unique)) {
                $output = & "C:\msys64\usr\bin\pacman.exe" -Fy $dep 2>$null
                if ($output) {
                    Write-Host "Found package for $dep in pacman database" -ForegroundColor Green
                    $output | Out-String | Write-Host
                }
            }
        } else {
            Write-Host "✅ All dependencies found!" -ForegroundColor Green
        }
        
        # Copy required MSYS2 runtime DLLs to ensure they're available
        Write-Host "Copying MSYS2 runtime libraries to build/bin..." -ForegroundColor Cyan
        $msys2RuntimeDlls = @(
            "libgcc_s_seh-1.dll",
            "libwinpthread-1.dll",
            "libstdc++-6.dll"
        )
        
        foreach ($dll in $msys2RuntimeDlls) {
            $sourcePath = "C:\msys64\mingw64\bin\$dll"
            $targetPath = "${{ github.workspace }}\build\bin\$dll"
            
            if (Test-Path $sourcePath) {
                Copy-Item -Path $sourcePath -Destination $targetPath -Force
                Write-Host "Copied $dll to build/bin" -ForegroundColor Green
            } else {
                Write-Host "⚠️ Could not find $dll in MSYS2" -ForegroundColor Yellow
            }
        }
        
        # Copy vcpkg dependencies
        Write-Host "Copying vcpkg libraries to build/bin..." -ForegroundColor Cyan
        $vcpkgBinDir = "${{ github.workspace }}\build\vcpkg_installed\x64-mingw-dynamic\bin"
        if (Test-Path $vcpkgBinDir) {
            $dllCount = 0
            foreach ($dll in (Get-ChildItem -Path $vcpkgBinDir -Filter "*.dll")) {
                $targetPath = Join-Path "${{ github.workspace }}\build\bin" $dll.Name
                if (-not (Test-Path $targetPath)) {
                    Copy-Item $dll.FullName $targetPath -Force
                    $dllCount++
                }
            }
            Write-Host "✅ Copied $dllCount DLLs from vcpkg to build/bin" -ForegroundColor Green
        } else {
            Write-Host "❌ vcpkg bin directory not found: $vcpkgBinDir" -ForegroundColor Red
        }
        
        # Ensure SIGNALS_SMD_PATH is properly set
        $env:SIGNALS_SMD_PATH = "${{ github.workspace }}\build\bin"
        Write-Host "SIGNALS_SMD_PATH set to: $env:SIGNALS_SMD_PATH" -ForegroundColor Cyan
        
        # List DLLs in build/bin after copying
        Write-Host "Contents of build/bin after copying dependencies:" -ForegroundColor Yellow
        Get-ChildItem -Path "${{ github.workspace }}\build\bin\*.dll" | 
            Where-Object { $_.Name -match "^(lib|msys-|libgcc|libwin|libstdc)" } |
            Sort-Object Name | 
            Format-Table Name, Length, LastWriteTime

    - name: Run integration tests
      if: false
      working-directory: ${{ env.BUILD_DIR }}
      shell: pwsh
      run: |
        echo "Setting up environment for tests..."
        
        $env:PATH = "${{ github.workspace }}\build\bin;${{ github.workspace }}\cwipc\install\bin;${{ github.workspace }}\build\vcpkg_installed\x64-mingw-dynamic\bin;${{ github.workspace }}\build\vcpkg_installed\x64-mingw-dynamic\lib;C:\msys64\mingw64\bin;$env:PATH"
        
        #set Python environment variables
        $env:PYTHONUNBUFFERED = "1"

        $env:SIGNALS_SMD_PATH = "${{ github.workspace }}\build\bin"
                
        echo "Checking for executables in PATH:"
        $exes = @("evanescent.exe", "cwipc_forward.exe", "cwipc_view.exe")
        foreach ($exe in $exes) {
            $exePath = (Get-Command $exe -ErrorAction SilentlyContinue).Path
            if ($exePath) {
                Write-Host "Found $exe at: $exePath"
            } else {
                Write-Host "WARNING: $exe not found in PATH"
            }
        }

        
        echo "Running pipeline integration test..."
        $scriptPath = Join-Path ${{ env.BUILD_DIR }} "scripts\run-pipeline-test.ps1"
        
        if (Test-Path $scriptPath) {
            & $scriptPath
        } else {
            Write-Host "ERROR: Could not find pipeline test script at $scriptPath"
            exit 1
        }

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: windows-test-logs
        path: |
          ${{ env.BUILD_DIR }}/logs/**/*
          ${{ env.BUILD_DIR }}/logs/*
        retention-days: 5
    - name: Create package
      run: cpack --preset mingw-production

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lldash-windows-x86_64
        path: build/package/lldash-*.tar.gz
  
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - linux-build
      - macos-build
      - macos-intel-build
      - macos-universal-build
      - windows-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Create Assets folder
        run: mkdir -p ${{ github.workspace }}/Assets
      - name: Download Linux package
        uses: actions/download-artifact@v4
        with:
          name: lldash-linux-x86_64
          path: ${{ github.workspace }}/Assets
      - name: Download MacOS Arm64 package
        uses: actions/download-artifact@v4
        with:
          name: lldash-mac-arm64
          path: ${{ github.workspace }}/Assets
      - name: Download MacOS Intel package
        uses: actions/download-artifact@v4
        with:
          name: lldash-mac-x86_64
          path: ${{ github.workspace }}/Assets
      - name: Download MacOS Intel package
        uses: actions/download-artifact@v4
        with:
          name: lldash-mac-universal
          path: ${{ github.workspace }}/Assets
      - name: Download Windows package
        uses: actions/download-artifact@v4
        with:
          name: lldash-windows-x86_64
          path: ${{ github.workspace }}/Assets
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ github.workspace }}/Assets/*
          body: |
            Release for ${{ github.ref }}
          generate_release_notes: true
          draft: true
          prerelease: true

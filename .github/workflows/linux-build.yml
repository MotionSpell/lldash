name: Linux Build

on:
  push:
    branches:
      - 1-cicd
  pull_request:
    branches:
      - 1-cicd

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive  

    - name: Set up environment variables
      run: |
        echo "SIGNALS_REPO=https://github.com/MotionSpell/signals.git" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get install -y --no-install-recommends \
        tzdata \
        zip \
        unzip \
        curl \
        tar \
        git \
        ca-certificates \
        linux-libc-dev \
        build-essential \
        pkg-config \
        yasm \
        nasm \
        autoconf \
        automake \
        autoconf-archive \
        autotools-dev \
        python3 \
        python3-jinja2 \
        gcc \
        g++ \
        make \
        libtool \
        libtool-bin \
        astyle

    - name: Install CMake and Ninja
      run: |
        chmod +x ./scripts/install_cmake.sh && \
        ./scripts/install_cmake.sh /opt/ninja /opt/cmake

    - name: Initialize vcpkg submodule
      run: |
        git submodule update --init --recursive

    - name: Bootstrap vcpkg
      run: |
        ./vcpkg/bootstrap-vcpkg.sh

    - name: Fix for libcrypto build
      run: |
        sudo apt-get update && \
              sudo apt-get autoremove -y libtool && \
              sudo apt-get install -y libtool && \
              libtoolize --copy --force

    - name: Install CWIPC dependencies
      run: |
        sudo apt-get install -y \
          libpcl-dev \
          libglfw3-dev \
          libturbojpeg0-dev \
          libopencv-dev \
          python3-dev \
          python3-pip 
    - name: Build CWIPC
      run: |
        cd cwipc
        git lfs install
        git lfs pull
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel $(nproc)
        sudo cmake --install build

    - name: Setup CWIPC Test
      run: |
        cd cwipc_test
        
        git lfs install
        
        git lfs pull -I "Samples/loot-110K-4tiles/**"
        
        # Check 
        if [ ! -d "Samples/loot-110K-4tiles" ] || [ $(ls -A Samples/loot-110K-4tiles | wc -l) -eq 0 ]; then
          echo "Error: No sample files found in cwipc_test/Samples/loot-110K-4tiles"
          exit 1
        fi
        
        echo "Found $(ls -A Samples/loot-110K-4tiles | wc -l) sample files in Samples/loot-110K-4tiles directory"
        
    - name: Configure CMake
      run: |
        cd ${{ env.BUILD_DIR }} && \
        cmake --preset linux-production

    - name: Build the project
      run: |
        cd ${{ env.BUILD_DIR }} && \
        cmake --build build --preset linux-production --parallel $(nproc)

    - name: Prepare test environment
      run: |
        cd ${{ env.BUILD_DIR }}
        mkdir -p build/lib/data
        cp build/bin/unittests.exe build/lib/
        cp -r signals/data/* build/lib/data/

    - name: Run tests
      run: |
        cd ${{ env.BUILD_DIR }}/build/lib && \
        ./unittests.exe
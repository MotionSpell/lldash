name: Linux Build

on:
  push:
    branches:
      - 1-cicd
  pull_request:
    branches:
      - 1-cicd

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        fetch-depth: 0  
    - name: Set up environment variables
      run: |
        echo "SIGNALS_REPO=https://github.com/MotionSpell/signals.git" >> $GITHUB_ENV
        echo "BUILD_DIR=${{ github.workspace }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt-get update && \
        sudo apt-get install -y --no-install-recommends \
        tzdata \
        zip \
        unzip \
        curl \
        tar \
        git \
        ca-certificates \
        linux-libc-dev \
        build-essential \
        pkg-config \
        yasm \
        nasm \
        autoconf \
        automake \
        autoconf-archive \
        autotools-dev \
        python3 \
        python3-jinja2 \
        gcc \
        g++ \
        make \
        libtool \
        libtool-bin \
        astyle

    - name: Install CMake and Ninja
      run: |
        chmod +x ./scripts/install_cmake.sh && \
        ./scripts/install_cmake.sh /opt/ninja /opt/cmake

    - name: Initialize vcpkg submodule
      run: |
        git submodule update --init --recursive

    - name: Bootstrap vcpkg
      run: |
        ./vcpkg/bootstrap-vcpkg.sh

    - name: Fix for libcrypto build
      run: |
        sudo apt-get update && \
              sudo apt-get autoremove -y libtool && \
              sudo apt-get install -y libtool && \
              libtoolize --copy --force

    - name: Install CWIPC dependencies
      run: |
        sudo apt-get install -y \
          libpcl-dev \
          libglfw3-dev \
          libturbojpeg0-dev \
          libopencv-dev \
          python3-dev \
          python3-pip 
    - name: Build CWIPC
      run: |
        cd cwipc
        git submodule update --init --recursive        
        git lfs install
        git lfs pull
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --parallel $(nproc)
        sudo cmake --install build

    - name: Install pipeline test dependencies and verify CWIPC
      run: |
        sudo apt-get update
        sudo apt-get install -y bc
        python3 -m pip install requests 
        
        # Find installed CWIPC libraries
        echo "CWIPC libraries installed:"
        find /usr/local -name "libcwipc*" || echo "No CWIPC libraries found"
        
        # Install wheels directly to system Python
        echo "Installing CWIPC Python wheels:"
        find /usr/local/share/cwipc/python/ -name "*.whl" -exec sudo pip3 install {} \; || echo "No wheels found"
        
        # Add library path to system
        echo "/usr/local/lib" | sudo tee /etc/ld.so.conf.d/cwipc.conf
        sudo ldconfig
        
        # Test if CWIPC is working
        echo "Testing cwipc_forward:"
        which cwipc_forward || echo "cwipc_forward not in PATH"


    - name: Configure CMake
      run: |
        cd ${{ env.BUILD_DIR }} && \
        cmake --preset linux-production

    - name: Build the project
      run: |
        cd ${{ env.BUILD_DIR }} && \
        cmake --build build --preset linux-production --parallel $(nproc)

   
    - name: Run integration tests
      run: |
        cd ${{ env.BUILD_DIR }}
        
        # Make script executable
        chmod +x scripts/run-piepline-test.sh
        
        # Show environment
        echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        echo "PYTHONPATH=$PYTHONPATH"
        
        # Run the pipeline test
        ./scripts/run-piepline-test.sh